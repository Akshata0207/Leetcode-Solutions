C++ Solution

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        map<int,int> m;
        vector<int> v;
        for(int i=0;i<nums.size();i++)
        {
            if(m.find(target-nums[i])!=m.end())
            {
                v.push_back(m[target-nums[i]]);
                v.push_back(i);
                return v;
            }
            m[nums[i]]=i;
        }
        return v;
    }
};

OR 

Python Solution

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
         sorted_nums = sorted((num, i) for i, num in enumerate(nums))
         l, r = 0, len(sorted_nums) - 1
         while l < r:
             if sorted_nums[l][0] + sorted_nums[r][0] == target:
                 return [sorted_nums[l][1], sorted_nums[r][1]]
             elif sorted_nums[l][0] + sorted_nums[r][0] < target:
                 l += 1
             else:
                 r -= 1
