You are playing the following Nim Game with your friend:

Initially, there is a heap of stones on the table.
You and your friend will alternate taking turns, and you go first.
On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.
The one who removes the last stone is the winner.
Given n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.

 

Example 1:

Input: n = 4
Output: false
Explanation: These are the possible outcomes:
1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.
2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.
3. You remove 3 stones. Your friend removes the last stone. Your friend wins.
In all outcomes, your friend wins.
Example 2:

Input: n = 1
Output: true
Example 3:

Input: n = 2
Output: true

Solution:
Should really be return n % 4 != 0 for readability, but with type coercion, you can drop the != 0 in Python and C/C++. Anyway, I got to this solution by thinking through some examples and putting myself in the shoes of the players.
4 stones
As given in the problem description, if you start with 4, you can't win, since your opponent will be left with 1-3 stones, and they can take all of them.
5-7 stones
Since your opponent will lose if they're left with 4 stones, I'd take 1-3 stones to reduce the total to 4 and win
8 stones
I can't win! The total remaining stones after my turn will be 5-7, and then my opponent can just take enough stones to reduce the total to 4, making me lose.
9-11 stones
I'll just take enough stones so only 8 remain, then I'll win, since no matter how many stones my opponent takes, I can knock down the total to 4.

And so the pattern repeats. But I still had a hard time really understanding the solution even if I could spot the repeating pattern.
So another way I found to think about it:
If you start the game with a multiple of 4 stones, no matter how many stones you take, your opponent can always take just enough stones so the total stones taken by both of you is 4 (e.g. if I take 1 stone, they'll take 3, or if I take 2, they'll take 2, etc.). So after each round, your opponent makes it so the total number of stones taken away is 4, so the total remaining will still be a multiple of 4. Your opponent will repeat this process until your left holding the bag with only 4 stones remaining on the board.

If the board doesn't start with a multiple of 4, you can just take away enough stones to make it a multiple of 4 (e.g. if the board starts with13 stones, you take away 1). From this point, you use the same strategy your opponent would have used if the game had started with a multiple of 4, forcing your opponent to always start their turn with a multiple of 4.

An example, starting with 16 stones, showing how my opponent can always make me lose by always making me start with a multiple of 4 stones on the board:
I take 3 stones; 13 remaining
Opponent takes 1 (to make the total remaining a multiple of 4); 12 remaining
I take 2 stones; 10 remaining
Opponent takes 2; 8 remaining
I take 1 stone; 7 remaining
Opponent takes 3 stones; 4 remaining
No matter how many stones I take, my opponent will be left with 1-3, and they can take all of them, so I lose :(

class Solution:
    def canWinNim(self, n: int) -> bool: 
        return n%4 != 0
